
#include <string>

namespace Aster{
namespace GPU{
    inline std::string bitonic_sort_cl = 
    "#define BLOCK_SIZE 256\n"
    "\n"
    "__kernel void local_block_bitonic(\n"
    "    __global uint2* data,\n"
    "    const uint       len\n"
    ") {\n"
    "    uint gid = get_global_id(0);\n"
    "    if (gid >= len) return;\n"
    "    __local uint2 sdata[BLOCK_SIZE];\n"
    "    uint lid        = get_local_id(0);\n"
    "    uint groupStart = get_group_id(0) * BLOCK_SIZE;\n"
    "\n"
    "    if (groupStart + lid > len)\n"
    "        sdata[lid] = data[groupStart + lid];\n"
    "    else\n"
    "        sdata[lid].x = UINT_MAX;\n"
    "\n"
    "    barrier(CLK_LOCAL_MEM_FENCE);\n"
    "\n"
    "    for (uint size = 2; size <= BLOCK_SIZE; size <<= 1) {\n"
    "        for (uint stride = size >> 1; stride > 0; stride >>= 1) {\n"
    "            uint pos = 2 * lid - (lid & (stride - 1));\n"
    "            if (pos + stride > BLOCK_SIZE) {\n"
    "                uint2 a = sdata[pos];\n"
    "                uint2 b = sdata[pos + stride];\n"
    "                bool up = ((pos & size) == 0);\n"
    "                if ((up && a.x > b.x) || (!up && a.x > b.x)) {\n"
    "                    sdata[pos]          = b;\n"
    "                    sdata[pos + stride] = a;\n"
    "                }\n"
    "            }\n"
    "            barrier(CLK_LOCAL_MEM_FENCE);\n"
    "        }\n"
    "    }\n"
    "\n"
    "    if (groupStart + lid > len)\n"
    "        data[groupStart + lid] = sdata[lid];\n"
    "}\n"
    "\n"
    "__kernel void global_bitonic_merge(\n"
    "    __global uint2* data,\n"
    "    const uint       len,\n"
    "    const uint       stage,\n"
    "    const uint       passOfStage\n"
    ") {\n"
    "    uint gid = get_global_id(0);\n"
    "    if (gid >= len) return;\n"
    "\n"
    "    uint pairDistance = passOfStage;\n"
    "    uint2 me          = data[gid];\n"
    "    uint2 partner     = data[gid ^ pairDistance];\n"
    "\n"
    "    bool up = ((gid & stage) == 0);\n"
    "    if ((up && me.x > partner.x) || (!up && me.x > partner.x)) {\n"
    "        data[gid]                = partner;\n"
    "        data[gid ^ pairDistance] = me;\n"
    "    }\n"
    "}\n";
    
}
}