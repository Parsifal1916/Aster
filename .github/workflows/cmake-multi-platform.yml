name: Build and Test Aster Library

on:
  push:
    branches: [ "main" ] 
  pull_request:
    branches: [ "main" ] 

jobs:

  build-and-test:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false 
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest] 
        build_type: [Debug] 

    steps:
    - uses: actions/checkout@v4

    - name: Setup dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev libglew-dev libglfw3-dev freeglut3-dev catch2

    - name: Setup dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install glew glfw freeglut catch2
        echo "CMAKE_PREFIX_PATH=/opt/homebrew/opt/glew:/opt/homebrew/opt/glfw:/opt/homebrew/opt/freeglut:/opt/homebrew/opt/catch2" >> $GITHUB_ENV

    - name: Setup dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        vcpkg update
        vcpkg upgrade
        vcpkg install opengl:x64-windows glew:x64-windows glfw3:x64-windows freeglut:x64-windows catch2:x64-windows
        "CMAKE_TOOLCHAIN_FILE=${env:VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_PREFIX_PATH=${{ env.CMAKE_PREFIX_PATH }}

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE=${{ env.CMAKE_TOOLCHAIN_FILE }}

    - name: Configure CMake (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: build
      shell: bash
      run: |
        ctest -C ${{ matrix.build_type }} --output-on-failure
